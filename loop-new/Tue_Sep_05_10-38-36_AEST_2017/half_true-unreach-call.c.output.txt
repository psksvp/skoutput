define i32 @main() local_unnamed_addr #0 !dbg !14 { 
  
    %1 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !15
    %2 = add i32 %1, 1000000, !dbg !16
    %3 = icmp ult i32 %2, 2000001, !dbg !16
    %4 = zext i1 %3 to i32, !dbg !17
    tail call void @__VERIFIER_assume(i32 %4) #2 , !dbg !19
    %5 = shl nsw i32 %1, 1, !dbg !20
    %6 = icmp sgt i32 %1, 0, !dbg !22
    br i1 %6, label %7, label %74, !dbg !23
  
  ; <label>:7
    %8 = icmp sgt i32 %5, 1, !dbg !24
    %9 = select i1 %8, i32 %5, i32 1, !dbg !24
    %10 = icmp ult i32 %9, 8, !dbg !24
    br i1 %10, label %62, label %11, !dbg !24
  
  ; <label>:11
    %12 = and i32 %9, 2147483640, !dbg !24
    %13 = icmp eq i32 %12, 0, !dbg !24
    br i1 %13, label %62, label %14, !dbg !24
  
  ; <label>:14
    %15 = add nsw i32 %12, -8, !dbg !25
    %16 = lshr exact i32 %15, 3, !dbg !25
    %17 = and i32 %16, 1, !dbg !25
    %18 = icmp eq i32 %17, 0, !dbg !25
    br i1 %18, label %19, label %21, !dbg !25
  
  ; <label>:19
    br label %20, !dbg !25
  
  ; <label>:20
    br label %21, !dbg !25
  
  ; <label>:21
    %22 = phi i32 [ 0, %14 ], [ 8, %20 ]
    %23 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3 >, %14 ], [ <i32 8, i32 9, i32 10, i32 11 >, %20 ]
    %24 = phi <4 x i32> [ zeroinitializer, %14 ], [ <i32 1, i32 0, i32 1, i32 0 >, %20 ]
    %25 = phi <4 x i32> [ zeroinitializer, %14 ], [ <i32 1, i32 0, i32 1, i32 0 >, %20 ]
    %26 = icmp eq i32 %16, 0, !dbg !25
    br i1 %26, label %52, label %27, !dbg !25
  
  ; <label>:27
    br label %28, !dbg !25
  
  ; <label>:28
    %29 = phi i32 [ %22, %27 ], [ %48, %28 ], !dbg !25
    %30 = phi <4 x i32> [ %23, %27 ], [ %49, %28 ]
    %31 = phi <4 x i32> [ %24, %27 ], [ %46, %28 ]
    %32 = phi <4 x i32> [ %25, %27 ], [ %47, %28 ]
    %33 = add <4 x i32> %30, <i32 4, i32 4, i32 4, i32 4 >, !dbg !25
    %34 = xor <4 x i32> %30, <i32 -1, i32 -1, i32 -1, i32 -1 >, !dbg !26
    %35 = and <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1 >, !dbg !26
    %36 = xor <4 x i32> %33, <i32 -1, i32 -1, i32 -1, i32 -1 >, !dbg !26
    %37 = and <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1 >, !dbg !26
    %38 = add nsw <4 x i32> %35, %31, !dbg !26
    %39 = add nsw <4 x i32> %37, %32, !dbg !26
    %40 = add <4 x i32> %30, <i32 8, i32 8, i32 8, i32 8 >, !dbg !25
    %41 = add <4 x i32> %30, <i32 12, i32 12, i32 12, i32 12 >, !dbg !25
    %42 = xor <4 x i32> %40, <i32 -1, i32 -1, i32 -1, i32 -1 >, !dbg !26
    %43 = and <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1 >, !dbg !26
    %44 = xor <4 x i32> %41, <i32 -1, i32 -1, i32 -1, i32 -1 >, !dbg !26
    %45 = and <4 x i32> %44, <i32 1, i32 1, i32 1, i32 1 >, !dbg !26
    %46 = add nsw <4 x i32> %43, %38, !dbg !26
    %47 = add nsw <4 x i32> %45, %39, !dbg !26
    %48 = add i32 %29, 16, !dbg !25
    %49 = add <4 x i32> %30, <i32 16, i32 16, i32 16, i32 16 >, !dbg !25
    %50 = icmp eq i32 %48, %12, !dbg !25
    br i1 %50, label %51, label %28, !dbg !25, !llvm.loop !27
  
  ; <label>:51
    br label %52, !dbg !26
  
  ; <label>:52
    %53 = phi <4 x i32> [ <i32 1, i32 0, i32 1, i32 0 >, %21 ], [ %46, %51 ]
    %54 = phi <4 x i32> [ <i32 1, i32 0, i32 1, i32 0 >, %21 ], [ %47, %51 ]
    %55 = add <4 x i32> %54, %53, !dbg !26
    %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef >, !dbg !26
    %57 = add <4 x i32> %55, %56, !dbg !26
    %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef >, !dbg !26
    %59 = add <4 x i32> %57, %58, !dbg !26
    %60 = extractelement <4 x i32> %59, i32 0, !dbg !26
    %61 = icmp eq i32 %9, %12
    br i1 %61, label %74, label %62, !dbg !24
  
  ; <label>:62
    %63 = phi i32 [ 0, %11 ], [ 0, %7 ], [ %12, %52 ]
    %64 = phi i32 [ 0, %11 ], [ 0, %7 ], [ %60, %52 ]
    br label %65, !dbg !24
  
  ; <label>:65
    %66 = phi i32 [ %71, %65 ], [ %63, %62 ]
    %67 = phi i32 [ %70, %65 ], [ %64, %62 ]
    %68 = and i32 %66, 1, !dbg !24
    %69 = xor i32 %68, 1, !dbg !26
    %70 = add nsw i32 %69, %67, !dbg !26
    %71 = add nuw nsw i32 %66, 1, !dbg !25
    %72 = icmp slt i32 %71, %5, !dbg !22
    br i1 %72, label %65, label %73, !dbg !23, !llvm.loop !32
  
  ; <label>:73
    br label %74, !dbg !34
  
  ; <label>:74
    %75 = phi i32 [ 0, %0 ], [ %60, %52 ], [ %70, %73 ]
    %76 = icmp eq i32 %75, %1, !dbg !34
    %77 = zext i1 %76 to i32, !dbg !35
    %78 = lshr i32 %1, 31, !dbg !35
    %79 = or i32 %77, %78, !dbg !35
    %80 = icmp eq i32 %79, 0, !dbg !36
    br i1 %80, label %81, label %82, !dbg !38
  
  ; <label>:81
    br label %__error.81
  
  ; <label>:82
    ret i32 0, !dbg !41
  
  __error.81: 
    tail call void @__VERIFIER_error() #2 , !dbg !39
    br label %82, !dbg !40
  
} 

UNKNOWN
refinement failure due to exception: math integer op xor %68 1 not handled