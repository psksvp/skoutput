define i32 @main() #0  { 
  
    %1 = alloca i32, align 4
    %x = alloca i32, align 4
    %y = alloca i32, align 4
    store i32 0, i32* %1
    store i32 1, i32* %x, align 4, !dbg !17
    %2 = call i32 @__VERIFIER_nondet_uint() , !dbg !18
    store i32 %2, i32* %y, align 4, !dbg !19
    %3 = load i32, i32* %y, align 4, !dbg !20
    %4 = icmp ugt i32 %3, 0, !dbg !21
    %5 = zext i1 %4 to i32, !dbg !21
    call void @__VERIFIER_assume(i32 %5) , !dbg !22
    br label %6, !dbg !23
  
  ; <label>:6
    %7 = load i32, i32* %x, align 4, !dbg !24
    %8 = load i32, i32* %y, align 4, !dbg !27
    %9 = icmp ult i32 %7, %8, !dbg !28
    br i1 %9, label %10, label %24, !dbg !23
  
  ; <label>:10
    %11 = load i32, i32* %x, align 4, !dbg !29
    %12 = load i32, i32* %y, align 4, !dbg !30
    %13 = load i32, i32* %x, align 4, !dbg !31
    %14 = udiv i32 %12, %13, !dbg !32
    %15 = icmp ult i32 %11, %14, !dbg !33
    br i1 %15, label %16, label %20, !dbg !29
  
  ; <label>:16
    %17 = load i32, i32* %x, align 4, !dbg !34
    %18 = load i32, i32* %x, align 4, !dbg !35
    %19 = mul i32 %18, %17, !dbg !35
    store i32 %19, i32* %x, align 4, !dbg !35
    br label %23, !dbg !36
  
  ; <label>:20
    %21 = load i32, i32* %x, align 4, !dbg !37
    %22 = add i32 %21, 1, !dbg !37
    store i32 %22, i32* %x, align 4, !dbg !37
    br label %23
  
  ; <label>:23
    br label %6, !dbg !23
  
  ; <label>:24
    %25 = load i32, i32* %x, align 4, !dbg !38
    %26 = load i32, i32* %y, align 4, !dbg !39
    %27 = icmp ne i32 %25, %26, !dbg !40
    br i1 %27, label %28, label %29, !dbg !38
  
  ; <label>:28
    br label %__error.28
  
  ; <label>:29
    %30 = load i32, i32* %1, !dbg !42
    ret i32 %30, !dbg !42
  
  __error.28: 
    call void (...) @__VERIFIER_error() #3 , !dbg !41
    unreachable, !dbg !41
  
} 

using predicates abs
List(0, 1, 0, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
running with predicates: 11
(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) ,
 Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,
((%y  // %x )  >= 0 ) ,
(%y  >= 1 ) ,
(%x  >= 0 ) ,
(%1  = 0 ) ,
(%y  >= 0 ) ,
(%x  = 1 ) ,
((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,
(%y  <= %x ) ,
((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) 
I am doing the trace:List(0, 0, 0, 0, 0, 1, 0, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And(  Or(  Not( (%y  <= %x ) ) , Not( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ) , Or(  Not( ((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,(%y  <= %x ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) , Or(  Not(  Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ) ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ) 
false 
false 
------------
simplify cache hit is 19 and mis is 2
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((1,5))
new backedge found from 5 to 2 with choice(1) exitValue is 0
----------------------
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
running with predicates: 10
 Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,
((%y  // %x )  >= 0 ) ,
(%y  >= 1 ) ,
(%x  >= 0 ) ,
(%1  = 0 ) ,
((%y  // %x )  <= %x ) ,
(%y  >= 0 ) ,
(%x  = 1 ) ,
(%y  <= %x ) ,
((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) 
I am doing the trace:List(0, 0, 1, 0, 0, 1, 0, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And(  Or(  Not( (%y  <= %x ) ) , Not( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ) , Or(  Not(  Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) , Or(  Not( ((%y  // %x )  <= %x ) ) ,(%y  <= %x ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((%y  // %x )  <= %x ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ) ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) , Not( ((%y  // %x )  <= %x ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ,false ) 
false 
false 
false 
false 
false 
------------
simplify cache hit is 22 and mis is 4
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((1,5))
new backedge found from 5 to 2 with choice(1) exitValue is 0
----------------------
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 12
(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) ,
 Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,
((%y  // %x )  >= 0 ) ,
(%y  >= 1 ) ,
(%x  >= 0 ) ,
(%1  = 0 ) ,
((%y  // %x )  <= %x ) ,
(%y  >= 0 ) ,
(%x  = 1 ) ,
((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,
(%y  <= %x ) ,
((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) 
I am doing the trace:List(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And(  Or(  Not( (%y  <= %x ) ) , Not( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ) , Or(  Not( ((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) , Or(  Not( ((%y  // %x )  <= %x ) ) ,(%y  <= %x ) ) , Or(  Not(  Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((%y  // %x )  <= %x ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ) ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) , Not( ((%y  // %x )  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ,false ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) , Not( ((%y  // %x )  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) , Not( ((%y  // %x )  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) , Not( ((%y  // %x )  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ,false ) 
 Or(  And(  Not( (%y  <= %x ) ) , Not( ((%y  // %x )  <= %x ) ) ,(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) , Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,((%y  // %x )  >= 0 ) ,(%y  >= 1 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%y  >= 0 ) ,(%x  = 1 ) ,((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ) ,false ,false ) 
false 
false 
false 
false 
false 
------------
simplify cache hit is 50 and mis is 6
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((4,8), (1,5), (1,9), (5,9), (2,6))
new backedge found from 8 to 5 with choice(4) exitValue is 0
new backedge found from 5 to 2 with choice(1) exitValue is 0
new backedge found from 9 to 2 with choice(1) exitValue is 0
new backedge found from 9 to 6 with choice(5) exitValue is 0
new backedge found from 6 to 3 with choice(2) exitValue is 0
----------------------
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 13
(exists ((x!21 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!21  * x!21 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!21  * x!21 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) ,
 Or( ((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) ,((((- 1 )  * %x )  + %y )  <= (- 1 ) ) ) ,
((%y  // %x )  >= 0 ) ,
(%y  >= 1 ) ,
(%x  >= 0 ) ,
(%1  = 0 ) ,
((%y  // %x )  <= %x ) ,
(%y  >= 0 ) ,
(exists ((x!63 Int )) (let ( (a!1 ((%x  + ((- 1 )  * (x!63  * x!63 ) ) )  <= 0 ) ) )  And( a!1 ,(((x!63  * x!63 )  + ((- 1 )  * %x ) )  <= 0 ) ) ) ) ,
(%x  = 1 ) ,
((%x  + ((- 1 )  * (%y  // %x ) ) )  <= (- 1 ) ) ,
(%y  <= %x ) ,
((%x  + ((- 1 )  * %y ) )  <= (- 1 ) ) 
I am doing the trace:List(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0)