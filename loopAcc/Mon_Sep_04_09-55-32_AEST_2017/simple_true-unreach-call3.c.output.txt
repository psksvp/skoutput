define i32 @main() #0  { 
  
    %1 = alloca i32, align 4
    %x = alloca i32, align 4
    %N = alloca i16, align 2
    store i32 0, i32* %1
    store i32 0, i32* %x, align 4, !dbg !17
    %2 = call i32 (...) @__VERIFIER_nondet_uint() , !dbg !18
    %3 = trunc i32 %2 to i16, !dbg !18
    store i16 %3, i16* %N, align 2, !dbg !19
    br label %4, !dbg !20
  
  ; <label>:4
    %5 = load i32, i32* %x, align 4, !dbg !21
    %6 = load i16, i16* %N, align 2, !dbg !24
    %7 = zext i16 %6 to i32, !dbg !24
    %8 = icmp ult i32 %5, %7, !dbg !25
    br i1 %8, label %9, label %12, !dbg !20
  
  ; <label>:9
    %10 = load i32, i32* %x, align 4, !dbg !26
    %11 = add i32 %10, 2, !dbg !26
    store i32 %11, i32* %x, align 4, !dbg !26
    br label %4, !dbg !20
  
  ; <label>:12
    %13 = load i32, i32* %x, align 4, !dbg !27
    %14 = urem i32 %13, 2, !dbg !28
    %15 = icmp ne i32 %14, 0, !dbg !28
    br i1 %15, label %16, label %17, !dbg !27
  
  ; <label>:16
    br label %__error.16
  
  ; <label>:17
    %18 = load i32, i32* %1, !dbg !30
    ret i32 %18, !dbg !30
  
  __error.16: 
    call void (...) @__VERIFIER_error() #3 , !dbg !29
    unreachable, !dbg !29
  
} 

using predicates abs
List(0, 1, 0, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
running with predicates: 7
(%N  >= 0 ) ,
(%x  = 0 ) ,
(%x  >= 0 ) ,
(%1  = 0 ) ,
((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ,
(%N  <= %x ) ,
((%x % 2 )  >= 1 ) 
I am doing the trace:List(0, 0, 0, 1, 0, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And(  Or(  Not( ((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ) , Not( (%N  <= %x ) ) ) , Or( ((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ,(%N  <= %x ) ) , Not( ((%x % 2 )  >= 1 ) ) ,(%N  >= 0 ) ,(%x  = 0 ) ,(%x  >= 0 ) ,(%1  = 0 ) ) ,false ) 
 Or(  And(  Not( ((%x % 2 )  >= 1 ) ) , Not( (%N  <= %x ) ) ,(%N  >= 0 ) ,(%x  = 0 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ) , And(  Not( ((%x % 2 )  >= 1 ) ) , Not( (%N  <= %x ) ) ,(%N  >= 0 ) ,(%x  = 0 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ) , And(  Not( ((%x % 2 )  >= 1 ) ) , Not( (%N  <= %x ) ) , Not( (%x  = 0 ) ) ,(%N  >= 0 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ) ,false ,false ) 
 Or(  And(  Or(  Not( ((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ) , Not( (%N  <= %x ) ) ) , Or( ((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ,(%N  <= %x ) ) , Not( ((%x % 2 )  >= 1 ) ) , Not( (%x  = 0 ) ) ,(%N  >= 0 ) ,(%x  >= 0 ) ,(%1  = 0 ) ) ,false ) 
 Or(  And(  Not( ((%x % 2 )  >= 1 ) ) , Not( ((%x  + ((- 1 )  * %N ) )  <= (- 1 ) ) ) , Not( (%x  = 0 ) ) ,(%N  >= 0 ) ,(%x  >= 0 ) ,(%1  = 0 ) ,(%N  <= %x ) ) ,false ) 
false 
------------
simplify cache hit is 11 and mis is 5
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((1,3))
new backedge found from 3 to 2 with choice(1) exitValue is 0
----------------------
TRUE