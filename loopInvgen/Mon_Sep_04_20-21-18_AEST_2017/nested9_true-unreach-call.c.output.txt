define i32 @main() local_unnamed_addr #0 !dbg !14 { 
  
    %1 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !15
    %2 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !16
    %3 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !17
    %4 = add i32 %1, 999999, !dbg !18
    %5 = icmp ult i32 %4, 1999999, !dbg !18
    %6 = zext i1 %5 to i32, !dbg !19
    tail call void @__VERIFIER_assume(i32 %6) #2 , !dbg !21
    %7 = add i32 %2, 999999, !dbg !22
    %8 = icmp ult i32 %7, 1999999, !dbg !22
    %9 = zext i1 %8 to i32, !dbg !23
    tail call void @__VERIFIER_assume(i32 %9) #2 , !dbg !24
    %10 = add i32 %3, 999999, !dbg !25
    %11 = icmp ult i32 %10, 1999999, !dbg !25
    %12 = zext i1 %11 to i32, !dbg !26
    tail call void @__VERIFIER_assume(i32 %12) #2 , !dbg !27
    %13 = mul nsw i32 %1, 3, !dbg !28
    %14 = add nsw i32 %3, %2, !dbg !29
    %15 = icmp sle i32 %13, %14, !dbg !30
    %16 = icmp sgt i32 %1, 0, !dbg !31
    %17 = and i1 %15, %16, !dbg !33
    br i1 %17, label %18, label %51, !dbg !33
  
  ; <label>:18
    %19 = shl nsw i32 %1, 1
    br label %20, !dbg !34
  
  ; <label>:20
    %21 = phi i32 [ 0, %18 ], [ %48, %45 ]
    %22 = phi i32 [ 0, %18 ], [ %47, %45 ]
    %23 = phi i32 [ 0, %18 ], [ %46, %45 ]
    %24 = shl nsw i32 %23, 1, !dbg !35
    %25 = mul nsw i32 %23, 3, !dbg !36
    %26 = icmp slt i32 %24, %25, !dbg !37
    br i1 %26, label %27, label %45, !dbg !38
  
  ; <label>:27
    br label %28, !dbg !39
  
  ; <label>:28
    %29 = phi i32 [ %42, %41 ], [ %22, %27 ]
    %30 = icmp slt i32 %23, %29, !dbg !39
    br i1 %30, label %31, label %41, !dbg !40
  
  ; <label>:31
    br label %32, !dbg !41
  
  ; <label>:32
    %33 = phi i32 [ %38, %37 ], [ %23, %31 ]
    %34 = sub nuw nsw i32 %33, %23, !dbg !41
    %35 = icmp sgt i32 %34, %19, !dbg !42
    br i1 %35, label %36, label %37, !dbg !43
  
  ; <label>:36
    br label %__error.36
  
  ; <label>:37
    %38 = add nuw nsw i32 %33, 1, !dbg !47
    %39 = icmp eq i32 %38, %29, !dbg !39
    br i1 %39, label %40, label %32, !dbg !40, !llvm.loop !48
  
  ; <label>:40
    br label %41, !dbg !38
  
  ; <label>:41
    %42 = add nsw i32 %29, 1, !dbg !38
    %43 = icmp eq i32 %42, %21, !dbg !37
    br i1 %43, label %44, label %28, !dbg !38, !llvm.loop !51
  
  ; <label>:44
    br label %45, !dbg !53
  
  ; <label>:45
    %46 = add nuw nsw i32 %23, 1, !dbg !53
    %47 = add nuw i32 %22, 2, !dbg !34
    %48 = add i32 %21, 3, !dbg !34
    %49 = icmp eq i32 %46, %1, !dbg !31
    br i1 %49, label %50, label %20, !dbg !34, !llvm.loop !54
  
  ; <label>:50
    br label %51, !dbg !56
  
  ; <label>:51
    ret i32 0, !dbg !56
  
  __error.36: 
    tail call void @__VERIFIER_error() #2 , !dbg !45
    br label %37, !dbg !46
  
} 

using predicates abs
List(0, 0, 0, 0, 0, 0, 0, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
list of variables to quantify over is empty
list of variables to quantify over is empty
list of variables to quantify over is empty
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 22
false ,
(%46  = (1  + %23 ) ) ,
(%21  = %48 ) ,
(%48  = (3  + %21 ) ) ,
(%22  = %47 ) ,
(%38  = (1  + %33 ) ) ,
(%47  = (2  + %22 ) ) ,
 Not( (%46  = %1 ) ) ,
((%33  + ((- 1 )  * %23 ) )  <= %19 ) ,
 Not( (%29  <= %23 ) ) ,
(%42  = %21 ) ,
 Not( (%1  <= 0 ) ) ,
(%33  = %23 ) ,
((%19  + ((- 1 )  * %33 ) %23 )  <= (- 1 ) ) ,
(%38  = %29 ) ,
(%1  >= (- 999999 ) ) ,
(%29  = %22 ) ,
(%42  = (1  + %29 ) ) ,
(%23  = %46 ) ,
(%1  <= 666666 ) ,
(%1  <= 999999 ) ,
(%23  >= 1 ) 
I am doing the trace:List(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0)