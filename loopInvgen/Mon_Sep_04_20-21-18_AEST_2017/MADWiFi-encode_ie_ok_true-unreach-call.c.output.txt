define i32 @main() local_unnamed_addr #0 !dbg !14 { 
  
    %1 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !15
    %2 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !16
    %3 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !17
    %4 = icmp slt i32 %1, 1000000, !dbg !18
    %5 = zext i1 %4 to i32, !dbg !18
    tail call void @__VERIFIER_assume(i32 %5) #2 , !dbg !19
    %6 = icmp slt i32 %2, 1000000, !dbg !20
    %7 = zext i1 %6 to i32, !dbg !20
    tail call void @__VERIFIER_assume(i32 %7) #2 , !dbg !21
    %8 = icmp slt i32 %3, 1000000, !dbg !22
    %9 = zext i1 %8 to i32, !dbg !22
    tail call void @__VERIFIER_assume(i32 %9) #2 , !dbg !23
    %10 = icmp sgt i32 %1, 0, !dbg !24
    %11 = icmp sgt i32 %2, 0, !dbg !25
    %12 = and i1 %10, %11, !dbg !26
    %13 = icmp sgt i32 %3, 0, !dbg !27
    %14 = and i1 %12, %13, !dbg !26
    %15 = xor i1 %14, true, !dbg !26
    %16 = icmp slt i32 %2, %1, !dbg !28
    %17 = or i1 %16, %15, !dbg !26
    br i1 %17, label %40, label %18, !dbg !26
  
  ; <label>:18
    %19 = sub nsw i32 %2, %1, !dbg !29
    %20 = shl nsw i32 %3, 1, !dbg !30
    %21 = icmp sge i32 %19, %20, !dbg !31
    %22 = icmp sgt i32 %19, 2, !dbg !32
    %23 = and i1 %22, %13, !dbg !34
    %24 = and i1 %21, %23, !dbg !36
    br i1 %24, label %25, label %40, !dbg !36
  
  ; <label>:25
    br label %26, !dbg !37
  
  ; <label>:26
    %27 = phi i32 [ %36, %35 ], [ %1, %25 ]
    %28 = phi i32 [ %37, %35 ], [ 0, %25 ]
    %29 = icmp slt i32 %27, 0, !dbg !37
    br i1 %29, label %30, label %31, !dbg !39
  
  ; <label>:30
    br label %__error.30
  
  ; <label>:31
    %32 = add nsw i32 %27, 1, !dbg !42
    %33 = icmp slt i32 %32, %2, !dbg !43
    br i1 %33, label %35, label %34, !dbg !44
  
  ; <label>:34
    br label %__error.34
  
  ; <label>:35
    %36 = add nsw i32 %27, 2, !dbg !48
    %37 = add nuw nsw i32 %28, 1, !dbg !49
    %38 = icmp slt i32 %37, %3, !dbg !51
    br i1 %38, label %26, label %39, !dbg !52, !llvm.loop !54
  
  ; <label>:39
    br label %40, !dbg !57
  
  ; <label>:40
    ret i32 0, !dbg !57
  
  __error.30: 
    tail call void @__VERIFIER_error() #2 , !dbg !40
    br label %31, !dbg !41
  
  __error.34: 
    tail call void @__VERIFIER_error() #2 , !dbg !46
    br label %35, !dbg !47
  
} 

using predicates abs
List(1, 0, 0, 0, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
List(1, 0, 0, 1, 0, 0, 0, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
running with predicates: 20
(%36  = (2  + %27 ) ) ,
(%27  = %36 ) ,
((((- 1 )  * %1 )  + %2 )  >= 3 ) ,
(%13  =  Not( (%3  <= 0 ) ) ) ,
((%27  + ((- 1 )  * %2 ) )  <= (- 2 ) ) ,
 Not( (%3  <= %37 ) ) ,
(%27  = %1 ) ,
(%28  = 0 ) ,
 Not( (%2  <= 0 ) ) ,
(%1  <= %2 ) ,
 Not( (%1  <= 0 ) ) ,
 Not( (1000000  <= %3 ) ) ,
%13 ,
(%28  = %37 ) ,
(%37  = (1  + %28 ) ) ,
(0  <= %27 ) ,
 Not( (1000000  <= %1 ) ) ,
((((- 1 )  * %1 )  + %2 )  >= (2  * %3 ) ) ,
 Not( (0  <= %27 ) ) ,
 Not( (1000000  <= %2 ) ) 
I am doing the trace:List(1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0)