define i32 @main(i32 , i8** nocapture readnone ) local_unnamed_addr #0 !dbg !14 { 
  
    %3 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !15
    %4 = icmp ult i32 %3, 10, !dbg !16
    %5 = zext i1 %4 to i32, !dbg !17
    tail call void @__VERIFIER_assume(i32 %5) #2 , !dbg !19
    %6 = icmp sgt i32 %3, 0, !dbg !20
    br i1 %6, label %7, label %35, !dbg !22
  
  ; <label>:7
    %8 = icmp eq i32 %3, 1
    br label %11, !dbg !22
  
  ; <label>:9
    br i1 %6, label %10, label %35, !dbg !23
  
  ; <label>:10
    br label %25, !dbg !24
  
  ; <label>:11
    %12 = phi i32 [ 0, %7 ], [ %23, %11 ]
    %13 = phi i32 [ 0, %7 ], [ %14, %11 ]
    %14 = add nuw nsw i32 %13, 1, !dbg !25
    %15 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !26
    %16 = icmp sgt i32 %15, -1, !dbg !27
    %17 = and i1 %8, %16, !dbg !28
    %18 = zext i1 %17 to i32, !dbg !29
    tail call void @__VERIFIER_assume(i32 %18) #2 , !dbg !30
    %19 = icmp eq i32 %15, 1, !dbg !31
    %20 = select i1 %19, i32 2000, i32 10000, !dbg !31
    %21 = icmp eq i32 %15, 0, !dbg !31
    %22 = select i1 %21, i32 4000, i32 %20, !dbg !31
    %23 = add nsw i32 %12, %22
    %24 = icmp eq i32 %14, %3, !dbg !20
    br i1 %24, label %9, label %11, !dbg !22, !llvm.loop !32
  
  ; <label>:25
    %26 = phi i32 [ %31, %30 ], [ 0, %10 ]
    %27 = phi i32 [ %32, %30 ], [ %23, %10 ]
    %28 = icmp sgt i32 %27, 0, !dbg !24
    br i1 %28, label %30, label %29, !dbg !35
  
  ; <label>:29
    br label %__error.29
  
  ; <label>:30
    %31 = add nuw nsw i32 %26, 1, !dbg !37
    %32 = add nsw i32 %27, -1, !dbg !38
    %33 = icmp eq i32 %31, %3, !dbg !39
    br i1 %33, label %34, label %25, !dbg !23, !llvm.loop !40
  
  ; <label>:34
    br label %35, !dbg !43
  
  ; <label>:35
    ret i32 0, !dbg !43
  
  __error.29: 
    tail call void @__VERIFIER_error() #2 , !dbg !36
    br label %30, !dbg !36
  
} 

using predicates abs
List(0, 0, 0, 0, 0, 1, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
List(0, 0, 0, 0, 0, 0, 1, 1, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 16
(%3  >= 0 ) ,
 Or(  And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) ,
 Not( (%31  = %3 ) ) ,
 Not( (10  <= %3 ) ) ,
 Not( (%27  <= 0 ) ) ,
%8 ,
(%26  = 0 ) ,
(%27  = %32 ) ,
(%3  <= 1 ) ,
(%3  >= 1 ) ,
 Not( (%3  <= 0 ) ) ,
(%27  <= 0 ) ,
(%32  = ((- 1 )  + %27 ) ) ,
(%31  = (1  + %26 ) ) ,
(%26  = %31 ) ,
(%27  = %23 ) 
I am doing the trace:List(0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And( (%3  >= 0 ) , Not( (10  <= %3 ) ) ,(%3  >= 1 ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And(  Or( %8 , Not( (%3  <= 1 ) ) ) , Or(  Not( %8 ) ,(%3  <= 1 ) ) ,(%3  >= 0 ) , Not( (10  <= %3 ) ) ,(%3  >= 1 ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And( (%3  >= 0 ) , Or(  And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) , Not( (10  <= %3 ) ) ,%8 ,(%3  <= 1 ) ,(%3  >= 1 ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And( (%3  >= 0 ) , Or(  And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) , Not( (10  <= %3 ) ) ,%8 ,(%3  <= 1 ) ,(%3  >= 1 ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And( (%3  >= 0 ) , Or(  And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) , Not( (10  <= %3 ) ) ,%8 ,(%3  <= 1 ) ,(%3  >= 1 ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And(  Or(  Not( (%31  = (1  + %26 ) ) ) , Not( (%26  = %31 ) ) ) , Or(  Not(  Not( (%31  = %3 ) ) ) , Not( (%31  = (1  + %26 ) ) ) ) , Or(  Not( (%31  = %3 ) ) ,(%31  = (1  + %26 ) ) ) , Or(  Not( (%27  = %32 ) ) , Not( (%32  = ((- 1 )  + %27 ) ) ) ) , Not( (%27  <= 0 ) ) ,(%3  >= 0 ) , Or(  And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) , Not( (10  <= %3 ) ) , Not( (%27  <= 0 ) ) ,%8 ,(%26  = 0 ) ,(%3  <= 1 ) ,(%3  >= 1 ) , Not( (%3  <= 0 ) ) ,(%27  = %23 ) ) ,false ) 
false 
false 
false 
false 
------------
simplify cache hit is 23 and mis is 4
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((6,8), (7,9))
new backedge found from 8 to 7 with choice(6) exitValue is 1
new backedge found from 9 to 8 with choice(7) exitValue is 0
----------------------
using predicates abs
List(0, 0, 1, 0, 0, 0, 1, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
List(0, 0, 1, 0, 0, 0, 0, 1, 1, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 15
(%3  >= 0 ) ,
 Not( (%31  = %3 ) ) ,
 Not( (10  <= %3 ) ) ,
 Not( (%27  <= 0 ) ) ,
%8 ,
(%26  = 0 ) ,
 Or(  And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) ,
(%27  = %32 ) ,
 Not( (%3  <= 0 ) ) ,
 Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ,
(%27  <= 0 ) ,
(%32  = ((- 1 )  + %27 ) ) ,
(%31  = (1  + %26 ) ) ,
(%26  = %31 ) ,
(%27  = %23 ) 
I am doing the trace:List(0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And( (%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And(  Or(  Not( %8 ) , Not(  Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ) ) , Or( %8 ,(%3  >= 2 ) ,(%3  <= 0 ) ) ,(%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
false 
false 
false 
false 
false 
false 
false 
false 
false 
------------
simplify cache hit is 26 and mis is 6
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((7,9), (8,10))
new backedge found from 9 to 8 with choice(7) exitValue is 1
new backedge found from 10 to 9 with choice(8) exitValue is 0
----------------------
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 9
(%3  >= 0 ) ,
 Not( (10  <= %3 ) ) ,
%8 ,
(%26  = 0 ) ,
 Or(  And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) ,
 Not( (%3  <= 0 ) ) ,
 Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ,
(%27  <= 0 ) ,
(%27  = %23 ) 
I am doing the trace:List(0, 0, 1, 1, 0, 0, 0, 1, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And( (%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And(  Or(  Not( %8 ) , Not(  Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ) ) , Or( %8 ,(%3  >= 2 ) ,(%3  <= 0 ) ) ,(%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
false 
false 
false 
false 
false 
false 
------------
simplify cache hit is 29 and mis is 8
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((3,4))
new backedge found from 4 to 4 with choice(3) exitValue is 1
----------------------
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 15
(%3  >= 0 ) ,
 Not( (%31  = %3 ) ) ,
 Not( (10  <= %3 ) ) ,
 Not( (%27  <= 0 ) ) ,
%8 ,
(%26  = 0 ) ,
 Or(  And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) ,
(%27  = %32 ) ,
 Not( (%3  <= 0 ) ) ,
 Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ,
(%27  <= 0 ) ,
(%32  = ((- 1 )  + %27 ) ) ,
(%31  = (1  + %26 ) ) ,
(%26  = %31 ) ,
(%27  = %23 ) 
I am doing the trace:List(0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And( (%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And(  Or(  Not( %8 ) , Not(  Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ) ) , Or( %8 ,(%3  >= 2 ) ,(%3  <= 0 ) ) ,(%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
false 
false 
false 
false 
false 
false 
false 
false 
------------
simplify cache hit is 34 and mis is 8
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((3,4))
new backedge found from 4 to 4 with choice(3) exitValue is 1
----------------------
using predicates abs
generating predicates for abstraction
list of variables to quantify over is empty
list of variables to quantify over is empty
running with predicates: 15
(%3  >= 0 ) ,
 Not( (%31  = %3 ) ) ,
 Not( (10  <= %3 ) ) ,
 Not( (%27  <= 0 ) ) ,
%8 ,
(%26  = 0 ) ,
 Or(  And( (%23  <= 2000 ) ,(%23  >= 2000 ) ) , And( (%23  <= 4000 ) ,(%23  >= 4000 ) ) , And( (%23  <= 10000 ) ,(%23  >= 10000 ) ) ) ,
(%27  = %32 ) ,
 Not( (%3  <= 0 ) ) ,
 Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ,
(%27  <= 0 ) ,
(%32  = ((- 1 )  + %27 ) ) ,
(%31  = (1  + %26 ) ) ,
(%26  = %31 ) ,
(%27  = %23 ) 
I am doing the trace:List(0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0)

Fixed point reached with Predicates ===============
true 
 Or(  And( (%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
 Or(  And(  Or(  Not( %8 ) , Not(  Or( (%3  >= 2 ) ,(%3  <= 0 ) ) ) ) , Or( %8 ,(%3  >= 2 ) ,(%3  <= 0 ) ) ,(%3  >= 0 ) , Not( (10  <= %3 ) ) , Not( (%3  <= 0 ) ) ) ,false ) 
false 
false 
false 
false 
false 
false 
false 
false 
false 
false 
------------
simplify cache hit is 39 and mis is 8
last loc eq to false? >>>yes
------------------safeBackEdges
candidate pairs Vector((8,10), (3,4), (9,11))
new backedge found from 10 to 9 with choice(8) exitValue is 1
new backedge found from 4 to 4 with choice(3) exitValue is 1
new backedge found from 11 to 10 with choice(9) exitValue is 0
----------------------
TRUE