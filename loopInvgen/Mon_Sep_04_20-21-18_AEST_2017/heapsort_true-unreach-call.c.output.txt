define i32 @main(i32 , i8** nocapture readnone ) local_unnamed_addr #0 !dbg !14 { 
  
    %3 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !15
    %4 = add i32 %3, -1, !dbg !16
    %5 = icmp ult i32 %4, 1000000, !dbg !16
    %6 = zext i1 %5 to i32, !dbg !17
    tail call void @__VERIFIER_assume(i32 %6) #2 , !dbg !19
    %7 = icmp sgt i32 %3, 1, !dbg !20
    %8 = select i1 %7, i32 %3, i32 %4, !dbg !21
    %9 = icmp sgt i32 %8, 1, !dbg !22
    br i1 %9, label %10, label %87, !dbg !24
  
  ; <label>:10
    %11 = xor i1 %7, true, !dbg !21
    %12 = zext i1 %11 to i32, !dbg !21
    %13 = sdiv i32 %3, 2, !dbg !25
    %14 = add nsw i32 %12, %13, !dbg !21
    br label %15
  
  ; <label>:15
    %16 = phi i32 [ %21, %73 ], [ %8, %10 ]
    %17 = phi i32 [ %74, %73 ], [ %14, %10 ]
    %18 = shl nsw i32 %17, 1
    %19 = icmp sgt i32 %17, 1
    br label %20, !dbg !24
  
  ; <label>:20
    %21 = phi i32 [ %16, %15 ], [ %83, %82 ]
    %22 = icmp sgt i32 %18, %21, !dbg !26
    br i1 %22, label %69, label %23, !dbg !27
  
  ; <label>:23
    br label %24, !dbg !28
  
  ; <label>:24
    %25 = phi i32 [ %66, %65 ], [ %18, %23 ]
    %26 = phi i32 [ %46, %65 ], [ %17, %23 ]
    %27 = icmp slt i32 %25, %21, !dbg !28
    br i1 %27, label %28, label %45, !dbg !29
  
  ; <label>:28
    %29 = icmp sgt i32 %26, 0, !dbg !30
    br i1 %29, label %31, label %30, !dbg !31
  
  ; <label>:30
    br label %__error.30
  
  ; <label>:31
    %32 = icmp sgt i32 %25, %3, !dbg !35
    br i1 %32, label %33, label %34, !dbg !36
  
  ; <label>:33
    br label %__error.33
  
  ; <label>:34
    %35 = or i32 %25, 1, !dbg !40
    %36 = icmp sgt i32 %35, 0, !dbg !41
    br i1 %36, label %38, label %37, !dbg !42
  
  ; <label>:37
    br label %__error.37
  
  ; <label>:38
    %39 = icmp sgt i32 %35, %3, !dbg !46
    br i1 %39, label %40, label %41, !dbg !47
  
  ; <label>:40
    br label %__error.40
  
  ; <label>:41
    %42 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !51
    %43 = icmp eq i32 %42, 0, !dbg !51
    %44 = select i1 %43, i32 %25, i32 %35, !dbg !51
    br label %45, !dbg !51
  
  ; <label>:45
    %46 = phi i32 [ %25, %24 ], [ %44, %41 ]
    %47 = icmp sgt i32 %46, 0, !dbg !52
    br i1 %47, label %49, label %48, !dbg !53
  
  ; <label>:48
    br label %__error.48
  
  ; <label>:49
    %50 = icmp sle i32 %46, %3, !dbg !57
    br i1 %50, label %52, label %51, !dbg !58
  
  ; <label>:51
    br label %__error.51
  
  ; <label>:52
    %53 = tail call i32 (...) @__VERIFIER_nondet_int() #2 , !dbg !62
    %54 = icmp eq i32 %53, 0, !dbg !62
    br i1 %54, label %55, label %68, !dbg !62
  
  ; <label>:55
    %56 = icmp sgt i32 %26, 0, !dbg !63
    br i1 %56, label %58, label %57, !dbg !64
  
  ; <label>:57
    br label %__error.57
  
  ; <label>:58
    %59 = icmp sgt i32 %26, %3, !dbg !68
    br i1 %59, label %60, label %61, !dbg !69
  
  ; <label>:60
    br label %__error.60
  
  ; <label>:61
    br i1 %47, label %63, label %62, !dbg !73
  
  ; <label>:62
    br label %__error.62
  
  ; <label>:63
    br i1 %50, label %65, label %64, !dbg !77
  
  ; <label>:64
    br label %__error.64
  
  ; <label>:65
    %66 = shl nsw i32 %46, 1
    %67 = icmp sgt i32 %66, %21, !dbg !26
    br i1 %67, label %68, label %24, !dbg !27, !llvm.loop !81
  
  ; <label>:68
    br label %69, !dbg !84
  
  ; <label>:69
    br i1 %19, label %70, label %76, !dbg !84
  
  ; <label>:70
    %71 = icmp sgt i32 %17, %3, !dbg !85
    br i1 %71, label %72, label %73, !dbg !86
  
  ; <label>:72
    br label %__error.72
  
  ; <label>:73
    %74 = add nsw i32 %17, -1, !dbg !90
    %75 = icmp sgt i32 %21, 1, !dbg !22
    br i1 %75, label %15, label %86, !dbg !24, !llvm.loop !91
  
  ; <label>:76
    %77 = icmp sgt i32 %21, 0, !dbg !94
    br i1 %77, label %79, label %78, !dbg !95
  
  ; <label>:78
    br label %__error.78
  
  ; <label>:79
    %80 = icmp sgt i32 %21, %3, !dbg !99
    br i1 %80, label %81, label %82, !dbg !100
  
  ; <label>:81
    br label %__error.81
  
  ; <label>:82
    %83 = add nsw i32 %21, -1, !dbg !104
    %84 = icmp sgt i32 %83, 1, !dbg !22
    br i1 %84, label %20, label %85, !dbg !24, !llvm.loop !91
  
  ; <label>:85
    br label %87, !dbg !105
  
  ; <label>:86
    br label %87, !dbg !105
  
  ; <label>:87
    ret i32 0, !dbg !105
  
  __error.30: 
    tail call void @__VERIFIER_error() #2 , !dbg !33
    br label %31, !dbg !34
  
  __error.33: 
    tail call void @__VERIFIER_error() #2 , !dbg !38
    br label %34, !dbg !39
  
  __error.37: 
    tail call void @__VERIFIER_error() #2 , !dbg !44
    br label %38, !dbg !45
  
  __error.40: 
    tail call void @__VERIFIER_error() #2 , !dbg !49
    br label %41, !dbg !50
  
  __error.48: 
    tail call void @__VERIFIER_error() #2 , !dbg !55
    br label %49, !dbg !56
  
  __error.51: 
    tail call void @__VERIFIER_error() #2 , !dbg !60
    br label %52, !dbg !61
  
  __error.57: 
    tail call void @__VERIFIER_error() #2 , !dbg !66
    br label %58, !dbg !67
  
  __error.60: 
    tail call void @__VERIFIER_error() #2 , !dbg !71
    br label %61, !dbg !72
  
  __error.62: 
    tail call void @__VERIFIER_error() #2 , !dbg !75
    br label %63, !dbg !76
  
  __error.64: 
    tail call void @__VERIFIER_error() #2 , !dbg !79
    br label %65, !dbg !80
  
  __error.72: 
    tail call void @__VERIFIER_error() #2 , !dbg !88
    br label %73, !dbg !89
  
  __error.78: 
    tail call void @__VERIFIER_error() #2 , !dbg !97
    br label %79, !dbg !98
  
  __error.81: 
    tail call void @__VERIFIER_error() #2 , !dbg !102
    br label %82, !dbg !103
  
} 

using predicates abs
List(0, 0, 0, 0, 0, 0, 0)
no Repetitions, rtn linear automaton
linear auto created and about to return
using predicates abs
generating predicates for abstraction
running with predicates: 17
(%7  =  Not( (%3  <= 1 ) ) ) ,
(%18  = (2  * %17 ) ) ,
(let ( (a!1  And(  Not( %7 ) ,((%8  + ((- 1 )  * %3 ) )  <= (- 1 ) ) ,((%3  + ((- 1 )  * %8 ) )  <= 1 ) ) ) )  Or(  And( %7 ,(%8  = %3 ) ) ,a!1 ) ) ,
 Not( (%17  <= %3 ) ) ,
(%17  <= %3 ) ,
(%16  = %21 ) ,
 Not( (%18  <= %21 ) ) ,
(%16  = %8 ) ,
 Not( (%21  <= 1 ) ) ,
(%74  = ((- 1 )  + %17 ) ) ,
(%3  <= 1000000 ) ,
(%3  >= 1 ) ,
(%17  = %14 ) ,
(%17  = %74 ) ,
(%21  = %16 ) ,
 Not( (%8  <= 1 ) ) ,
(let ( (a!1 ((%14  + ((- 1 )  * (%3  // 2 ) ) )  <= 1 ) ) (a!2 ((%14  + ((- 1 )  * (%3  // 2 ) ) )  >= 1 ) ) (a!3 ((%14  + ((- 1 )  * (%3  // 2 ) ) )  <= 0 ) ) (a!4 ((%14  + ((- 1 )  * (%3  // 2 ) ) )  >= 0 ) ) )  Or(  And(  Not( %7 ) ,a!1 ,a!2 ) , And( %7 ,a!3 ,a!4 ) ) ) 
I am doing the trace:List(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0)